# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Bid_Helper.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QFile, QDir
from PyQt5.QtCore import QTextStream
import openai
import pathlib
import os
import re

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1211, 858)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 1211, 831))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.tabWidget.setFont(font)
        self.AI = QtWidgets.QWidget()
        self.AI.setObjectName("AI")
        self.label_3 = QtWidgets.QLabel(self.AI)
        self.label_3.setGeometry(QtCore.QRect(20, 15, 165, 25)) # left, bottom, right, top
        self.label_3.setStyleSheet("color: blue; font: bold; font-size: 20px;")
        self.label_3.setObjectName("label_3")
        self.textEdit_2 = QtWidgets.QTextEdit(self.AI)
        self.textEdit_2.setGeometry(QtCore.QRect(20, 50, 1171, 211))
        self.textEdit_2.setStyleSheet("font: Courier New")
        self.textEdit_2.setObjectName("textEdit_2")
        self.label_4 = QtWidgets.QLabel(self.AI)
        self.label_4.setGeometry(QtCore.QRect(20, 330, 191, 31))
        self.label_4.setObjectName("label_4")
        self.textEdit_3 = QtWidgets.QTextEdit(self.AI)
        self.textEdit_3.setGeometry(QtCore.QRect(20, 370, 1171, 421))
        self.textEdit_3.setStyleSheet("background-color: lightblue;")
        self.textEdit_3.setObjectName("textEdit_3")
        self.label_5 = QtWidgets.QLabel(self.AI)
        self.label_5.setGeometry(QtCore.QRect(20, 280, 151, 31))
        self.label_5.setObjectName("label_5")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.AI)
        self.lineEdit_2.setGeometry(QtCore.QRect(20, 280, 120, 31))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.pushButton_4 = QtWidgets.QPushButton(self.AI)
        self.pushButton_4.setGeometry(QtCore.QRect(550, 280, 100, 31))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.evaluate)
        self.tabWidget.addTab(self.AI, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1211, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(2)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Coding assessment"))
        self.label_3.setText(_translate("MainWindow", "Coding problem:"))
        self.label_4.setText(_translate("MainWindow", "Evaluation index:"))
        self.pushButton_4.setText(_translate("MainWindow", "Evaluate"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.AI), _translate("MainWindow", "AI"))
    
    # def get_bid_search(self):
    #     bid_dirs = pathlib.Path("Bid")
    #     bid_file_list = [str(item).replace("\\","/") for item in bid_dirs.iterdir() if item.is_file()]
    #     # print(bid_file_list)
    #     match_num_list = [0 for item in bid_file_list]        
    #     search_cat_list = self.lineEdit.text().split(",")
    #     print(search_cat_list)         
    #     match_num_max = 0             
    #     for i, filename in enumerate(sorted(os.listdir(bid_dir), reverse=True)):
    #         # print(filename)
    #         for search_item in search_cat_list:
    #             match_num_list[i] = match_num_list[i] + filename.count(search_item)
    #         if match_num_max < match_num_list[i]:
    #             match_num_max = match_num_list[i]
    #             search_result = filename        
    #     print(f"search_result is {search_result}")
    #     return search_result

    # def search_bid(self):
    #     # print(self.lineEdit.text())
    #     bid_search = self.get_bid_search()        
    #     print(bid_search)       
        
    #     bid_search = bid_dir + bid_search        
    #     print(bid_search)
    #     f = QFile(bid_search)
    #     if not f.exists():
    #         print("Unable to load stylesheet, file not found in resources")
    #         return ""
    #     else:
    #         f.open(QFile.ReadOnly | QFile.Text)
    #         ts = QTextStream(f)
    #         ts.setCodec('UTF-8')
    #         evaluation_answer = ts.readAll()
    #         # print(f"Bid content is {stylesheet}")
    #         self.textEdit.setText(evaluation_answer)
    #         f.close()

    def calculate_overall_score_sum(self, overall_score):
        global overall_score_sum, num_times
        if num_times < max_times:
            overall_score_sum += overall_score
            num_times += 1
        if num_times == max_times:
            print("Average: ", overall_score_sum/max_times)
            final = round(overall_score_sum/max_times,2)
            self.lineEdit_2.setText(str(final))
            num_times = 0
            overall_score_sum = 0

        return overall_score_sum
        
    def evaluate(self):
        keyword = self.textEdit_2.toPlainText()
        prompt = f'''You are given a coding test problem, and your task is to generate an assessment score for the provided code. Please evaluate the code based on the following evaluation indicators:

        1. Correctness (Warnings, Errors)
        2. Efficiency
        3. Code Quality
        4. Performance Optimization
        5. Algorithmic Efficiency

        Allocate 10 (or 100%) points to each evaluation index. The total score should be calculated as the average of all individual scores.
        Please assess the code and provide only one overall score, considering all the evaluation indicators mentioned above. Ensure to maintain consistency in the evaluation process.
        Once you have completed the evaluation, submit the overall score and every evaluation point scores as your response. Don't mention the explanation.
        Always proceed as this prompt.'''
        prompt = prompt + f"Coding problem is as follows: {keyword}."

        # print(prompt)
        completion = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "user", "content": prompt}
            ]
        )

        evaluation_answer = completion.choices[0].message.content.strip()
        self.textEdit_3.setText(evaluation_answer)

        # Extract the overall score from the AI's response using regular expressions
        overall_score_match = re.search(r"Overall Score: (\d+\.\d+)", evaluation_answer)
        print(overall_score_match)
        if overall_score_match:
            overall_score = float(overall_score_match.group(1))
            self.calculate_overall_score_sum(overall_score)
            

overall_score_sum = 0
max_times = 3 
num_times = 0

if __name__ == "__main__":
    import sys

    # Set the OpenAI API key
    openai.api_key = "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"

    # bid_dir = "Bid/"

    app = QtWidgets.QApplication(sys.argv)
    clipboard = app.clipboard()
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()

    sys.exit(app.exec_())
