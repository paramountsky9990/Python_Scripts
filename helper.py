# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Bid_Helper.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QFile, QDir
from PyQt5.QtCore import QTextStream
import openai
import pathlib
import os


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1211, 858)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 1211, 831))
        font = QtGui.QFont()
        font.setPointSize(10)
        # font.setBold(True)
        # font.setWeight(75)
        self.tabWidget.setFont(font)
        self.tabWidget.setObjectName("tabWidget")
        self.Search = QtWidgets.QWidget()
        self.Search.setObjectName("Search")
        self.label = QtWidgets.QLabel(self.Search)
        self.label.setGeometry(QtCore.QRect(10, 20, 151, 31))
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(self.Search)
        self.lineEdit.setGeometry(QtCore.QRect(190, 20, 671, 41))
        self.lineEdit.setObjectName("lineEdit")
        self.label_2 = QtWidgets.QLabel(self.Search)
        self.label_2.setGeometry(QtCore.QRect(10, 80, 181, 31))
        self.label_2.setObjectName("label_2")
        self.textEdit = QtWidgets.QTextEdit(self.Search)
        self.textEdit.setGeometry(QtCore.QRect(10, 120, 1171, 651))
        self.textEdit.setObjectName("textEdit")
        self.pushButton = QtWidgets.QPushButton(self.Search)
        self.pushButton.setGeometry(QtCore.QRect(870, 20, 131, 41))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.search_bid)
        self.pushButton_2 = QtWidgets.QPushButton(self.Search)
        self.pushButton_2.setGeometry(QtCore.QRect(1020, 20, 161, 41))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.copy_bid)
        self.pushButton_3 = QtWidgets.QPushButton(self.Search)
        self.pushButton_3.setGeometry(QtCore.QRect(870, 70, 131, 41))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.save_bid)
        self.tabWidget.addTab(self.Search, "")
        self.AI = QtWidgets.QWidget()
        self.AI.setObjectName("AI")
        self.label_3 = QtWidgets.QLabel(self.AI)
        self.label_3.setGeometry(QtCore.QRect(20, 20, 161, 21))
        self.label_3.setObjectName("label_3")
        self.textEdit_2 = QtWidgets.QTextEdit(self.AI)
        self.textEdit_2.setGeometry(QtCore.QRect(20, 50, 1171, 211))
        self.textEdit_2.setObjectName("textEdit_2")
        self.label_4 = QtWidgets.QLabel(self.AI)
        self.label_4.setGeometry(QtCore.QRect(20, 330, 191, 31))
        self.label_4.setObjectName("label_4")
        self.textEdit_3 = QtWidgets.QTextEdit(self.AI)
        self.textEdit_3.setGeometry(QtCore.QRect(20, 370, 1171, 421))
        self.textEdit_3.setObjectName("textEdit_3")
        self.label_5 = QtWidgets.QLabel(self.AI)
        self.label_5.setGeometry(QtCore.QRect(20, 280, 151, 31))
        self.label_5.setObjectName("label_5")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.AI)
        self.lineEdit_2.setGeometry(QtCore.QRect(160, 280, 631, 31))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.pushButton_4 = QtWidgets.QPushButton(self.AI)
        self.pushButton_4.setGeometry(QtCore.QRect(810, 280, 81, 31))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.create_bid)
        self.pushButton_7 = QtWidgets.QPushButton(self.AI)
        self.pushButton_7.setGeometry(QtCore.QRect(810, 320, 121, 31))
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_7.clicked.connect(self.ask_to_chatgpt)
        self.pushButton_8 = QtWidgets.QPushButton(self.AI)
        self.pushButton_8.setGeometry(QtCore.QRect(950, 320, 121, 31))
        self.pushButton_8.setObjectName("pushButton_7")
        self.pushButton_8.clicked.connect(self.create_native)
        self.pushButton_5 = QtWidgets.QPushButton(self.AI)
        self.pushButton_5.setGeometry(QtCore.QRect(900, 280, 91, 31))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.clicked.connect(self.copy_ai_bid)
        self.pushButton_6 = QtWidgets.QPushButton(self.AI)
        self.pushButton_6.setGeometry(QtCore.QRect(1010, 280, 81, 31))
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_6.clicked.connect(self.save_ai_bid)
        self.tabWidget.addTab(self.AI, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1211, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(1)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Bid_Helper"))
        self.label.setText(_translate("MainWindow", "Job Category"))
        self.label_2.setText(_translate("MainWindow", "Bidding Sentence"))
        self.pushButton.setText(_translate("MainWindow", "Search"))
        self.pushButton_2.setText(_translate("MainWindow", "Copy"))
        self.pushButton_3.setText(_translate("MainWindow", "Save"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Search), _translate("MainWindow", "Search"))
        self.label_3.setText(_translate("MainWindow", "Job Description:"))
        self.label_4.setText(_translate("MainWindow", "Bidding Sentence:"))
        self.label_5.setText(_translate("MainWindow", "Job Category:"))
        self.pushButton_4.setText(_translate("MainWindow", "Create"))
        self.pushButton_7.setText(_translate("MainWindow", "Ask to ChatGPT"))
        self.pushButton_8.setText(_translate("MainWindow", "Native"))
        self.pushButton_5.setText(_translate("MainWindow", "Copy"))
        self.pushButton_6.setText(_translate("MainWindow", "Save"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.AI), _translate("MainWindow", "AI"))
    
    def get_bid_search(self):
        bid_dirs = pathlib.Path("Bid")
        bid_file_list = [str(item).replace("\\","/") for item in bid_dirs.iterdir() if item.is_file()]
        # print(bid_file_list)
        match_num_list = [0 for item in bid_file_list]        
        search_cat_list = self.lineEdit.text().split(",")
        print(search_cat_list)         
        match_num_max = 0             
        for i, filename in enumerate(sorted(os.listdir(bid_dir), reverse=True)):
            # print(filename)
            for search_item in search_cat_list:
                match_num_list[i] = match_num_list[i] + filename.count(search_item)
            if match_num_max < match_num_list[i]:
                match_num_max = match_num_list[i]
                search_result = filename        
        print(f"search_result is {search_result}")
        return search_result

    def search_bid(self):
        # print(self.lineEdit.text())
        bid_search = self.get_bid_search()        
        print(bid_search)       
        
        bid_search = bid_dir + bid_search        
        print(bid_search)
        f = QFile(bid_search)
        if not f.exists():
            print("Unable to load stylesheet, file not found in resources")
            return ""
        else:
            f.open(QFile.ReadOnly | QFile.Text)
            ts = QTextStream(f)
            ts.setCodec('UTF-8')
            bid_content = ts.readAll()
            # print(f"Bid content is {stylesheet}")
            self.textEdit.setText(bid_content)
            f.close()
        
    
    def copy_bid(self):
        print("copy_bid")
        self.textEdit.copy()
        # clipboard.setText(self.textEdit.copy())
        print (clipboard.text())

    def save_bid(self):        
        print("bid saved!")
        textout = self.textEdit.toPlainText()
        fileName = bid_dir+self.get_bid_search()
        print(fileName)
        file = QtCore.QFile(fileName)
        if file.open(QtCore.QIODevice.WriteOnly):
            QtCore.QTextStream(file) << textout
            # print(textout)
            file.close()
        else:
            print('Unable to open file')

    def create_bid(self):
        keyword = self.textEdit_2.toPlainText()
        # print(keyword)

        # prompt = f"I am Peter Araki."
        prompt = f""
        prompt = prompt + f"Job description is as follows: {keyword}."
        prompt = prompt + f"\r\n"
        prompt = prompt + f"Write a bidding template for above job description(not mention rate and deadline.)\r\n"
        prompt = prompt + f"Start with 'Dear Client'.\r\n"
        prompt = prompt + f"End with ', Peter Araki'.\r\n"

        # print(prompt)
        completion = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "user", "content": prompt}
            ]
        )

        bid_content = completion.choices[0].message.content.strip()
        self.textEdit_3.setText(bid_content)

    def ask_to_chatgpt(self):
        keyword = self.textEdit_2.toPlainText()
        # print(keyword)

        prompt = f"{keyword}"

        # print(prompt)
        completion = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "user", "content": prompt}
            ]
        )

        bid_content = completion.choices[0].message.content.strip()
        self.textEdit_3.setText(bid_content)

    def create_native(self):
        keyword = self.textEdit_2.toPlainText()
        # print(keyword)

        prompt = f""
        prompt = prompt + f"Make this sentence as native English: {keyword}."

        # print(prompt)
        completion = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "user", "content": prompt}
            ]
        )

        bid_content = completion.choices[0].message.content.strip()
        self.textEdit_3.setText(bid_content)

    def copy_ai_bid(self):
        self.textEdit_3.copy()
        print (clipboard.text())

    def save_ai_bid(self):
        textout = self.textEdit_3.toPlainText()
        fileName = bid_dir+self.lineEdit_2.text() +".txt"
        # print(fileName)
        file = QtCore.QFile(fileName)
        if file.open(QtCore.QIODevice.WriteOnly):
            QtCore.QTextStream(file) << textout
            # print(textout)
            file.close()
        else:
            print('Unable to open file')



if __name__ == "__main__":
    import sys

    # Set the OpenAI API key
    openai.api_key = "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"

    bid_dir = "Bid/"

    app = QtWidgets.QApplication(sys.argv)
    clipboard = app.clipboard()
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
